#!/usr/bin/env python3
import sys
import re
import json
import argparse
import traceback
import terminaltables
from typing import Dict

from lib_testbed.generic.util.logger import log
from lib_testbed.generic.util.base_tool import ClientPodTool
from lib_testbed.generic.util.attenuatorlib import AttenuatorLib


class AttenuatorTool(ClientPodTool):
    def get_command_list(self, parsed_args):
        config = self.get_config()
        kwargs = {'config': config}
        try:
            self.tool = AttenuatorLib(test_case=False, **kwargs)
        except Exception as e:
            if self.debug:
                traceback.print_exc(limit=2, file=sys.stdout)
            if re.compile(r"name: .* not found in config").match(str(e)):
                log.error(f"Unexpected client name: '{kwargs['nicknames']}'\n"
                          "First parameter should be client name specifier")
                exit(1)
            raise
        commands = self.map_commands_to_objects(self.tool)

        return commands, self.tool

    def get_tool_help(self, cmd, verbose=True, prefix='', not_callable=False):
        return super(AttenuatorTool, self).get_tool_help(cmd, verbose, prefix="{0} {1}", not_callable=False)

    @staticmethod
    def format_output(cmd, response, obj, json_output):
        if cmd in ['help', 'get-list']:
            if cmd in ['get-list']:
                response = '\n'.join(response)
            print(response)
        elif cmd in ['get-config']:
            json_to_print = json.dumps(response, indent=2)
            print(json_to_print)
        else:
            response.insert(0, ['ATT NAME', '$?', 'STDOUT', 'STDERR'])
            print(terminaltables.DoubleTable(response).table)
        return response

    def arg_parser(self, args):
        self.modify_initial_args(args)
        parser = argparse.ArgumentParser(add_help=False)
        parser.add_argument('-D', '--debug', action="store_true", help="Enable debug logs")
        parser.add_argument('-j', '--json', action="store_true", help="Set output type: json")
        self.add_cmd_arguments(parser)
        self.parser_help = parser.format_help()
        parsed_args = parser.parse_args(args[1:])
        if parsed_args.debug:
            args.remove('-D')
        for i, arg in enumerate(parsed_args.cmd_args):
            if ',' in arg:
                parsed_args.cmd_args[i] = arg.split(',')
        return parsed_args

    @property
    def map_commands_to_method_names(self) -> Dict:

        commands = {'set-att': 'set_att',
                    'read-att': 'read_att',
                    'get-config': 'get_config',
                    'get-list': 'get_list',
                    'help': 'get_tool_help_str'}

        return commands

    def modify_initial_args(self, args):
        if len(args) == 1:
            args.append('help')
            return
        for i, arg in enumerate(args):
            if i == 0:
                continue
            if arg in ['-h', '--help'] and (i == 1 or args[i - 1].startswith("-")):
                args[i] = 'help'
                break


def main(args):
    att_tool = AttenuatorTool(args)
    att_tool.execute()
    exit(0)


if __name__ == "__main__":
    main(sys.argv)
